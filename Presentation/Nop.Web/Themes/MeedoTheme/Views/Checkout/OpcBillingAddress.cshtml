@model CheckoutBillingAddressModel
<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_top" })
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="section ship-to-same-address">
            <p class="selector">
                <input asp-for="ShipToSameAddress" onclick="Shipping.toggleSameShippingAddress(this)" />
                <label asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
            </p>
        </div>
    }
    @if (Model.ExistingAddresses.Count > 0)
    {
        <script type="text/javascript" asp-location="Footer">
            $(document).ready(function () {
                //select first item by default
                var dataValue = $("#billing-address-input").val($("#billing-address-list-group").find("a.active").data("value"));

                Billing.newAddress(!dataValue);
                $('#checkout-steps').on('click', 'div#billing-address-list-group .list-group-item', function () {
                    $(this).parent().children("a").removeClass("active");
                    $(this).parent().find("a>span").removeClass("glyphicon-check");
                    $(this).parent().find("a>span").addClass("glyphicon-unchecked");
                    $(this).addClass("active");
                    $(this).find("span").removeClass("glyphicon-unchecked");
                    $(this).find("span").addClass("glyphicon-check");
                    var datavalue = $(this).data("value");
                    if (!datavalue) {
                        $('#billing-new-address-form .field-validation-error').html("");
                    }
                    Billing.newAddress(!datavalue);
                    $("#billing-address-input").val(datavalue);
                });               
            });            
        </script>
        <div class="section select-billing-address">
            <label for="billing-address-input">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            <div>
                <input type="hidden" id="billing-address-input" name="billing_address_id" value="">
                @*<select name="billing_address_id" id="billing-address-select" class="address-select form-control dropdown-toggle"
                    title="" onchange="Billing.newAddress(!this.value)">*@
                <div class="well" style="max-height: 300px; overflow: auto;">
                    <div id="billing-address-list-group" class="list-group checked-list-box">
                        @foreach (var address in Model.ExistingAddresses)
                        {
                            var addressLine = "";
                            addressLine += address.FirstName;
                            addressLine += " " + address.LastName;
                            if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                            {
                                addressLine += ", " + address.Address1;
                            }
                            if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                            {
                                addressLine += ", " + address.City;
                            }
                            if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                            {
                                addressLine += ", " + address.StateProvinceName;
                            }
                            if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                            {
                                addressLine += " " + address.ZipPostalCode;
                            }
                            if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                            {
                                addressLine += ", " + address.CountryName;
                            }
                            //how should we render "FormattedCustomAddressAttributes" here?
                            if (!Model.NewAddressPreselected && Model.ExistingAddresses.IndexOf(address) == 0)
                            {
                                <a href="#" class="list-group-item active" data-value="@(address.Id)"><span class="glyphicon glyphicon-check"></span>@(addressLine)</a>
                            }
                            else
                            {
                                <a href="#" class="list-group-item" data-value="@(address.Id)"><span class="glyphicon glyphicon-unchecked"></span>@(addressLine)</a>
                            }

                            @*<option value="@(address.Id)">@(addressLine)</option>*@
                        }
                        @*<option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>*@
                        @if (Model.NewAddressPreselected)
                        {
                            <a href="#" class="list-group-item active " data-value=""><span class="glyphicon glyphicon-check"></span>@T("Checkout.NewAddress")</a>
                        }
                        else
                        {
                            <a href="#" class="list-group-item" data-value=""><span class="glyphicon glyphicon-unchecked"></span>@T("Checkout.NewAddress")</a>
                        }

                        @*</select>*@
                    </div>
                </div>
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_middle" })
    <div class="section new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            <div class="enter-address-body form-horizontal">
                @{
                    var dataDictAddress = new ViewDataDictionary(ViewData);
                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                    @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
                }
            </div>
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_bottom" })
</div>
