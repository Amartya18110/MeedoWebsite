@model CheckoutShippingAddressModel
@using System.Text
<div class="checkout-data">
    <div class="section ship-to-same-address">
        <p class="selector">
            <div class="form-group">
                @*<input type="checkbox" name="billingAddress-checkbox" id="billingAddressSame" autocomplete="off" onclick="Shipping.toggleBillingAddressSame(this)"/>*@
                @*<input asp-for="BillingAddressSame" type="checkbox" name="billingAddress-checkbox" autocomplete="off" onclick="Shipping.toggleBillingAddressSame(this)" />*@
                <div class="checkbox">
                    <label>
                        <input asp-for="BillingAddressSame" type="checkbox" class="custom-control-input" autocomplete="off" onclick="Shipping.toggleBillingAddressSame(this)" />
                        <span class="cr"><i class="cr-icon fa fa-check"></i></span>
                        <label asp-for="BillingAddressSame">Is Billing address same?</label>
                    </label>
                </div>

                @*<div class="btn-group">
                    <input asp-for="BillingAddressSame" type="checkbox" class="custom-control-input" name="billingAddress-checkbox" autocomplete="off" onclick="Shipping.toggleBillingAddressSame(this)" />          
                    <label asp-for="BillingAddressSame" class="btn btn-default active">Are Billing address same?</label>
                </div>*@
            </div>
            @*<input asp-for="BillingAddressSame" onclick="Shipping.toggleBillingAddressSame(this)"/>
            <label asp-for="BillingAddressSame">Are Billing address same?</label>*@
        </p>
    </div>
    @if (Model.AllowPickUpInStore && !Model.PickUpInStoreOnly && Model.PickupPoints.Any())
    {
        <div class="section pickup-in-store">
            <p class="selector">
                <input asp-for="PickUpInStore" onclick="Shipping.togglePickUpInStore(this)" />
                <label asp-for="PickUpInStore">
                    @T("Checkout.PickupPoints")
                </label>
            </p>
            <p class="description">
                <i>@T("Checkout.PickupPoints.Description")</i>
            </p>
            <script type="text/javascript">
                $(document).ready(function () {
                    Shipping.togglePickUpInStore($('#@Html.IdFor(model => model.PickUpInStore)'));
                });
            </script>
        </div>
    }
    @if (Model.AllowPickUpInStore)
    {
        <div class="section pickup-points" id="pickup-points-form">
            @if (Model.PickupPoints.Any())
            {
                if (Model.PickUpInStoreOnly)
                {
                    <input type="hidden" asp-for="PickUpInStore" />
                }
                <div class="select-pickup-points">
                    @if (Model.PickupPoints.Count == 1)
                    {
                        var point = Model.PickupPoints.First();
                        <input name="pickup-points-id" id="pickup-points-id" type="hidden" value="@($"{point.Id}___{point.ProviderSystemName}")" />
                        <div class="single-pickup-point">
                            <ul>
                                <li class="single-pickup-point name">@point.Name</li>
                                <li class="single-pickup-point address">@($"{point.Address} {point.City} {point.StateName} {point.CountryName}")</li>
                                @if (!string.IsNullOrEmpty(point.PickupFee))
                                {
                                    <li class="single-pickup-point fee">@point.PickupFee</li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <label for="pickup-points-select">@T("Checkout.PickupPoints.SelectPickupPoint")</label>
                        <select name="pickup-points-id" id="pickup-points-select" class="address-select" title="">
                            @foreach (var point in Model.PickupPoints)
                            {
                                var addressLine = new StringBuilder();
                                addressLine.Append(point.Name);
                                if (!string.IsNullOrEmpty(point.Address))
                                {
                                    addressLine.AppendFormat(", {0}", point.Address);
                                }
                                if (!string.IsNullOrEmpty(point.City))
                                {
                                    addressLine.AppendFormat(", {0}", point.City);
                                }
                                if (!string.IsNullOrEmpty(point.StateName))
                                {
                                    addressLine.AppendFormat(", {0}", point.StateName);
                                }
                                if (!string.IsNullOrEmpty(point.CountryName))
                                {
                                    addressLine.AppendFormat(", {0}", point.CountryName);
                                }
                                if (!string.IsNullOrEmpty(point.PickupFee))
                                {
                                    addressLine.AppendFormat(", {0}", point.PickupFee);
                                }
                                <option value="@($"{point.Id}___{point.ProviderSystemName}")">@(addressLine)</option>
                            }
                        </select>
                    }
                </div>
                if (Model.DisplayPickupPointsOnMap)
                {
                    var src = $"https://maps.googleapis.com/maps/api/js{(string.IsNullOrEmpty(Model.GoogleMapsApiKey) ? string.Empty : $"?key={Model.GoogleMapsApiKey}")}";
                    <div class="pickup-points-map" id="map">
                        <script type="text/javascript">
                            var markers = new Map();
                            var googleMap = null;
                            $(document).ready(function () {
                                $.getScript("@src", function( data, textStatus, jqxhr ) {
                                    google.maps.visualRefresh = true;
                                    googleMap = new google.maps.Map(document.getElementById("map"), {
                                        zoom: 15,
                                        mapTypeId: google.maps.MapTypeId.ROADMAP
                                    });
                                    var geocoder = new google.maps.Geocoder();
                                    var infowindow = new google.maps.InfoWindow();
                                    @for (var i = 0; i < Model.PickupPoints.Count; i++)
                                    {
                                        var point = Model.PickupPoints[i];
                                        var value = $"{point.Id}___{point.ProviderSystemName}";
                                        var pickupPointInfo = Html.Raw($@"<div class='pickup-point-info'><ul><li><strong>{point.Name}</strong></li><li>{point.OpeningHours}</li><li>{point.PickupFee}</li></ul></div>");
                                        if (point.Latitude != null && point.Longitude != null)
                                        {
                                            <text>
                                                (function() {
                                                    var marker = new google.maps.Marker({
                                                        map: googleMap,
                                                        title: "@point.Name",
                                                        position: new google.maps.LatLng(@point.Latitude, @point.Longitude),
                                                        icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                    });
                                                    markers.set("@value", marker);
                                                    google.maps.event.addListener(marker, 'click', function () {
                                                        $('#pickup-points-select').val("@value");
                                                        googleMap.setCenter(this.getPosition());
                                                        infowindow.setContent("@pickupPointInfo");
                                                        infowindow.open(googleMap, marker);
                                                    });
                                                    @if (i == 0)
                                                    {
                                                        <text>googleMap.setCenter(marker.getPosition());</text>
                                                    }
                                                }());
                                            </text>
                                        }
                                        else
                                        {
                                            var address = $"{point.Address} {point.City} {point.ZipPostalCode} {point.CountryName}";
                                            <text>
                                                var interval_@i = setInterval( function () {
                                                    geocoder.geocode({'address': "@address"}, function(results, status) {
                                                        if (status === google.maps.GeocoderStatus.OK) {
                                                            var marker = new google.maps.Marker({
                                                                map: googleMap,
                                                                title: "@point.Name",
                                                                position: results[0].geometry.location,
                                                                icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                            });
                                                            markers.set("@value", marker);
                                                            google.maps.event.addListener(marker, 'click', function () {
                                                                $('#pickup-points-select').val("@value");
                                                                googleMap.setCenter(this.getPosition());
                                                                infowindow.setContent("@pickupPointInfo");
                                                                infowindow.open(googleMap, marker);
                                                            });
                                                            @if (i == 0) {
                                                                <text>googleMap.setCenter(marker.getPosition());</text>
                                                            }
/**/
                                                            clearInterval(interval_@i);
                                                        }
                                                    })
                                                }, 250);
                                            </text>
                                            }
                                        }

                                    $('#pickup-points-select').change(function() {
                                        new google.maps.event.trigger(markers.get(this.value), 'click' );
                                    });

                                    $("#@Html.IdFor(model => model.PickUpInStore)").change(function() {
                                        if ($('#@Html.IdFor(model => model.PickUpInStore)').is(':checked')) {
                                            var center = googleMap.getCenter();
                                            google.maps.event.trigger(googleMap, 'resize');
                                            googleMap.setCenter(center);
                                        }
                                    })
                                })
                            })
                        </script>
                    </div>
                }
            }
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        </div>
    }
    @if (!Model.PickUpInStoreOnly)
    {
        <div class="shipping-addresses" id="shipping-addresses-form">
            @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_shipping_address_top" })
            @if (Model.ExistingAddresses.Count > 0)
            {
                <script type="text/javascript" asp-location="Footer">
                    $(document).ready(function () {
                        //select first item by default
                        var dataValue = $("#shipping-address-input").val($("#shipping-address-list-group").find("a.active").data("value"));
                        Shipping.newAddress(!dataValue);
                        $('#checkout-steps').on('click', 'div#shipping-address-list-group .list-group-item', function () {
                            $(this).parent().children("a").removeClass("active");
                            $(this).parent().find("a>span").removeClass("glyphicon-check");
                            $(this).parent().find("a>span").addClass("glyphicon-unchecked");
                            $(this).addClass("active");
                            $(this).find("span").removeClass("glyphicon-unchecked");
                            $(this).find("span").addClass("glyphicon-check");
                            var datavalue = $(this).data("value");
                            if (!datavalue) {
                                $('#shipping-new-address-form .field-validation-error').html("");
                            }
                            Shipping.newAddress(!datavalue);
                            $("#shipping-address-input").val(datavalue);
                        });               
                    });            
                </script>

                <div class="section select-shipping-address">
                    <label for="shipping-address-select">@T("Checkout.SelectShippingAddressOrEnterNewOne")</label>
                    <div>
                        <input type="hidden" id="shipping-address-input" name="shipping_address_id" value="">
                        @*<select name="shipping_address_id" id="shipping-address-select" class="address-select form-control dropdown-toggle"
                            title="" onchange="Shipping.newAddress(!this.value)">*@
                        <div class="well" style="max-height: 300px; overflow: auto;">
                            <div id="shipping-address-list-group" class="list-group checked-list-box">
                                @foreach (var address in Model.ExistingAddresses)
                                {
                                    var addressLine = "";
                                    addressLine += address.FirstName;
                                    addressLine += " " + address.LastName;
                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine += ", " + address.Address1;
                                    }
                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += ", " + address.City;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += ", " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode;
                                    }
                                    if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                                    {
                                        addressLine += ", " + address.CountryName;
                                    }
                                    //how should we render "FormattedCustomAddressAttributes" here?
                                    @*<option value="@(address.Id)">@(addressLine)</option>*@
                                    if (!Model.NewAddressPreselected && Model.ExistingAddresses.IndexOf(address) == 0)
                                    {
                                        <a href="#" class="list-group-item active" data-value="@(address.Id)"><span class="glyphicon glyphicon-check"></span>@(addressLine)</a>
                                    }
                                    else
                                    {
                                        <a href="#" class="list-group-item" data-value="@(address.Id)"><span class="glyphicon glyphicon-unchecked"></span>@(addressLine)</a>
                                    }
                                }
                                @*<option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>*@
                                @if (Model.NewAddressPreselected)
                                {
                                    <a href="#" class="list-group-item active " data-value=""><span class="glyphicon glyphicon-check"></span>@T("Checkout.NewAddress")</a>
                                }
                                else
                                {
                                    <a href="#" class="list-group-item" data-value=""><span class="glyphicon glyphicon-unchecked"></span>@T("Checkout.NewAddress")</a>
                                }
                                @*</select>*@
                            </div>
                        </div>
                    </div>
                </div>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_shipping_address_middle" })
            <div class="section new-shipping-address" id="shipping-new-address-form">
                <div class="enter-address">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    <div class="enter-address-body form-horizontal">
                        @{
                            var dataDictAddress = new ViewDataDictionary(ViewData);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "ShippingNewAddress";
                            @await Html.PartialAsync("_CreateOrUpdateAddress", Model.ShippingNewAddress, dataDictAddress)
                        }
                    </div>
                </div>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_shipping_address_bottom" })
        </div>
    }
</div>
